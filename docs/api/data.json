{
    "project": {
        "name": "SLib 使用说明文档",
        "description": "SLib 内嵌 Log 类，支持动态加载各模块，配置出适合开发者使用的 slib.pro.js",
        "version": "1.2.1",
        "url": "https://github.com/fsiaonma/SLib"
    },
    "files": {
        "..\\dev\\eagleMysql\\eagleMysql.js": {
            "name": "..\\dev\\eagleMysql\\eagleMysql.js",
            "modules": {},
            "classes": {
                "sl.eagleMysql": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dev\\eagleMysql\\sqlCondition.js": {
            "name": "..\\dev\\eagleMysql\\sqlCondition.js",
            "modules": {},
            "classes": {
                "sl.sqlCondition": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dev\\log\\log.js": {
            "name": "..\\dev\\log\\log.js",
            "modules": {},
            "classes": {
                "sl.log": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dev\\log\\log_mode.js": {
            "name": "..\\dev\\log\\log_mode.js",
            "modules": {},
            "classes": {
                "sl.log_mode": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dev\\native_extend\\array\\array.js": {
            "name": "..\\dev\\native_extend\\array\\array.js",
            "modules": {},
            "classes": {
                "sl.array": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dev\\native_extend\\object\\object.js": {
            "name": "..\\dev\\native_extend\\object\\object.js",
            "modules": {},
            "classes": {
                "sl.object": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dev\\native_extend\\string\\string.js": {
            "name": "..\\dev\\native_extend\\string\\string.js",
            "modules": {},
            "classes": {
                "sl.string": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dev\\native_extend\\extendBase.js": {
            "name": "..\\dev\\native_extend\\extendBase.js",
            "modules": {},
            "classes": {
                "extendBase": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "..\\dev\\sl.js": {
            "name": "..\\dev\\sl.js",
            "modules": {},
            "classes": {
                "sl": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "sl.eagleMysql": {
            "name": "sl.eagleMysql",
            "shortname": "sl.eagleMysql",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\dev\\eagleMysql\\eagleMysql.js",
            "line": 1,
            "description": "eagleMysql 类，mysql 数据库适配器。",
            "is_constructor": 1
        },
        "sl.sqlCondition": {
            "name": "sl.sqlCondition",
            "shortname": "sl.sqlCondition",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\dev\\eagleMysql\\sqlCondition.js",
            "line": 1,
            "description": "sqlCondition 类，用于描述 sql 条件",
            "is_constructor": 1
        },
        "sl.log": {
            "name": "sl.log",
            "shortname": "sl.log",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\dev\\log\\log.js",
            "line": 1,
            "description": "log 类，用于打印信息，分为 debug, info, warnning, error 三类。",
            "is_constructor": 1
        },
        "sl.log_mode": {
            "name": "sl.log_mode",
            "shortname": "sl.log_mode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\dev\\log\\log_mode.js",
            "line": 1,
            "description": "log_mode 类，标记打印日志级别。",
            "is_constructor": 1
        },
        "sl.array": {
            "name": "sl.array",
            "shortname": "sl.array",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\dev\\native_extend\\array\\array.js",
            "line": 1,
            "description": "array 类，数组扩展类",
            "is_constructor": 1
        },
        "sl.object": {
            "name": "sl.object",
            "shortname": "sl.object",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\dev\\native_extend\\object\\object.js",
            "line": 1,
            "description": "object 类，对象扩展类",
            "is_constructor": 1
        },
        "sl.string": {
            "name": "sl.string",
            "shortname": "sl.string",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\dev\\native_extend\\string\\string.js",
            "line": 1,
            "description": "string 类，字符串扩展类",
            "is_constructor": 1
        },
        "extendBase": {
            "name": "extendBase",
            "shortname": "extendBase",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\dev\\native_extend\\extendBase.js",
            "line": 1,
            "description": "extendBase 类, 原生接口扩展的基类",
            "is_constructor": 1
        },
        "sl": {
            "name": "sl",
            "shortname": "sl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "..\\dev\\sl.js",
            "line": 1,
            "description": "SLib 类, 命名空间，最高层。",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "..\\dev\\eagleMysql\\eagleMysql.js",
            "line": 13,
            "description": "是否输出调试信息",
            "itemtype": "property",
            "name": "debug",
            "type": "bool",
            "class": "sl.eagleMysql"
        },
        {
            "file": "..\\dev\\eagleMysql\\eagleMysql.js",
            "line": 20,
            "description": "构造函数，初始化 eagleMysql 类。",
            "parmas": "{Object} config mysql数据库配置，包括账号，密码，url，库名等。",
            "itemtype": "method",
            "name": "init",
            "class": "sl.eagleMysql"
        },
        {
            "file": "..\\dev\\eagleMysql\\eagleMysql.js",
            "line": 34,
            "description": "建表",
            "parmas": "{Array} tables 表名数组",
            "itemtype": "method",
            "name": "createTables",
            "class": "sl.eagleMysql"
        },
        {
            "file": "..\\dev\\eagleMysql\\eagleMysql.js",
            "line": 56,
            "description": "往表中插入数据",
            "parmas": "{Array} params 插入操作的相关数据，包括表名，键值等",
            "params": [
                {
                    "name": "callback",
                    "description": "回调函数",
                    "type": "Function"
                }
            ],
            "example": [
                " var sqlCondtion = new SqlCondition();   <br/>\nvar insertParams = {                             <br/>\n    table  : 'T_TEST_USER',                      <br/>\n    keys   : ['USERNAME'],                       <br/>\n    values : ['testName']                        <br/>\n};                                               <br/>\neagleMysql.insert(insertParams, {                <br/>\n    success : function (data) {                  <br/>\n        console.log('success');                  <br/>\n    },                                           <br/>\n    error : function (err) {                     <br/>\n        console.log(err);                        <br/>\n    }                                            <br/>\n});                                              <br/>"
            ],
            "itemtype": "method",
            "name": "insert",
            "class": "sl.eagleMysql"
        },
        {
            "file": "..\\dev\\eagleMysql\\eagleMysql.js",
            "line": 94,
            "description": "删除表中指定数据",
            "parmas": "{Array} params 删除操作的相关数据，包括表名，条件等。",
            "params": [
                {
                    "name": "callback",
                    "description": "回调函数",
                    "type": "Function"
                }
            ],
            "example": [
                " var sqlCondtion = new SqlCondition();                       <br />\n var delParams = {                                                   <br />\n     table      : 'T_TEST_USER',                                     <br />\n     conditions : sqlCondtion.where(\"USERNAME = 'testName'\").getSql()<br />\n };                                                                  <br />\n eagleMysql.delete(delParams, {                                      <br />\n     success : function (data) {                                     <br />\n         console.log('success');                                     <br />\n     },                                                              <br />\n     error : function (err) {                                        <br />\n         console.log(err)                                            <br />\n     },                                                              <br />\n });                                                                 <br />"
            ],
            "itemtype": "method",
            "name": "delete",
            "class": "sl.eagleMysql"
        },
        {
            "file": "..\\dev\\eagleMysql\\eagleMysql.js",
            "line": 127,
            "description": "更新表中指定数据",
            "parmas": "{Array} params 更新操作的相关数据，包括表名，条件等。",
            "params": [
                {
                    "name": "callback",
                    "description": "回调函数",
                    "type": "Function"
                }
            ],
            "example": [
                " var sqlCondtion = new SqlCondition();                           <br />\n var updateParams = {                                                    <br />\n     table  : 'T_TEST_USER',\n     keys   : ['USERNAME'],                                              <br />\n     values : ['updateName'],                                            <br />\n     conditions : sqlCondtion.where(\"USERNAME = 'testName'\").getSql()    <br />\n };                                                                      <br />\n eagleMysql.update(updateParams, {                                       <br />\n     success : function (data) {                                         <br />\n         console.log('success');                                         <br />\n     },                                                                  <br />\n     error : function (err) {                                            <br />\n         console.log(err);                                               <br />\n     }                                                                   <br />\n });                                                                     <br />"
            ],
            "itemtype": "method",
            "name": "update",
            "class": "sl.eagleMysql"
        },
        {
            "file": "..\\dev\\eagleMysql\\eagleMysql.js",
            "line": 166,
            "description": "检索表中指定数据",
            "parmas": "{Array} params 更新操作的相关数据，包括表名，条件等。",
            "params": [
                {
                    "name": "callback",
                    "description": "回调函数",
                    "type": "Function"
                }
            ],
            "example": [
                " var sqlCondtion = new SqlCondition();                                   <br />\nvar selParams = {                                                                <br />\n    keys       : ['USERNAME'],                                                   <br />\n    table      : 'T_TEST_USER',                                                  <br />\n    conditions : sqlCondtion.where(\"USERNAME = 'updateName'\").and('1=1').getSql()<br />\n};                                                                               <br />\neagleMysql.select(selParams, {                                                   <br />\n    success : function (data) {                                                  <br />\n        console.log('success');                                                  <br />\n    },                                                                           <br />\n    error : function (err) {                                                     <br />\n        console.log(err)                                                         <br />\n    },                                                                           <br />\n});                                                                              <br />"
            ],
            "itemtype": "method",
            "name": "select",
            "class": "sl.eagleMysql"
        },
        {
            "file": "..\\dev\\eagleMysql\\eagleMysql.js",
            "line": 204,
            "description": "链接数据库",
            "itemtype": "method",
            "name": "connet",
            "class": "sl.eagleMysql"
        },
        {
            "file": "..\\dev\\eagleMysql\\eagleMysql.js",
            "line": 223,
            "description": "与数据库断开链接",
            "itemtype": "method",
            "name": "disconnet",
            "class": "sl.eagleMysql"
        },
        {
            "file": "..\\dev\\eagleMysql\\eagleMysql.js",
            "line": 232,
            "description": "数据库操作通用回调函数",
            "itemtype": "method",
            "name": "_doCallback",
            "access": "private",
            "tagname": "",
            "class": "sl.eagleMysql"
        },
        {
            "file": "..\\dev\\eagleMysql\\sqlCondition.js",
            "line": 9,
            "description": "where 条件",
            "itemtype": "method",
            "name": "where",
            "example": [
                " sl.sqlCondition.where(\"1=1\");"
            ],
            "return": {
                "description": "sl.sqlCondition 实例"
            },
            "class": "sl.sqlCondition"
        },
        {
            "file": "..\\dev\\eagleMysql\\sqlCondition.js",
            "line": 20,
            "description": "and 条件",
            "itemtype": "method",
            "name": "and",
            "example": [
                " sl.sqlCondition.and(\"1=1\");"
            ],
            "return": {
                "description": "sl.sqlCondition 实例"
            },
            "class": "sl.sqlCondition"
        },
        {
            "file": "..\\dev\\eagleMysql\\sqlCondition.js",
            "line": 31,
            "description": "or 条件",
            "itemtype": "method",
            "name": "or",
            "example": [
                " sl.sqlCondition.or(\"1=1\");"
            ],
            "return": {
                "description": "sl.sqlCondition 实例"
            },
            "class": "sl.sqlCondition"
        },
        {
            "file": "..\\dev\\eagleMysql\\sqlCondition.js",
            "line": 42,
            "description": "getSql 方法，获取拼接后的 sql 语句",
            "itemtype": "method",
            "name": "getSql",
            "example": [
                " sl.sqlCondition.where(\"1=1\").getSql();"
            ],
            "return": {
                "description": "拼接后的 sql 语句"
            },
            "class": "sl.sqlCondition"
        },
        {
            "file": "..\\dev\\log\\log.js",
            "line": 11,
            "description": "打印调试信息",
            "example": [
                " sl.log.d(\"mseeage\") 或 sl.log.debug(\"mseeage\");"
            ],
            "itemtype": "method",
            "name": "debug",
            "class": "sl.log"
        },
        {
            "file": "..\\dev\\log\\log.js",
            "line": 22,
            "description": "打印日志信息",
            "example": [
                " sl.log.i(\"mseeage\") 或 sl.log.info(\"mseeage\");"
            ],
            "itemtype": "method",
            "name": "info",
            "class": "sl.log"
        },
        {
            "file": "..\\dev\\log\\log.js",
            "line": 33,
            "description": "打印警告信息",
            "example": [
                " sl.log.w(\"mseeage\") 或 sl.log.warnning(\"message\");"
            ],
            "itemtype": "method",
            "name": "warnning",
            "class": "sl.log"
        },
        {
            "file": "..\\dev\\log\\log.js",
            "line": 44,
            "description": "打印错误信息",
            "example": [
                " sl.log.e(\"mseeage\") 或 sl.log.error(\"message\");"
            ],
            "itemtype": "method",
            "name": "error",
            "class": "sl.log"
        },
        {
            "file": "..\\dev\\log\\log.js",
            "line": 55,
            "description": "设置打印日志级别，提供给开发者打印等级选择。",
            "example": [
                " sl.log.setMode(sl.log_mode.DEBUG); 或 sl.log.setMode(sl.log_mode.INFO);"
            ],
            "params": [
                {
                    "name": "type",
                    "description": "打印级别，可选项:\n<ul>\n\t\t<li> sl.log_mode.DEBUG </li>\n\t\t<li> sl.log_mode.INFO </li>\n     <li> sl.log_mode.WARN </li>\n     <li> sl.log_mode.ERROR </li>\n</ul> <br />\n详情参见 {{#crossLink \"sl.log_mode\"}}{{/crossLink}}。",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "setMode",
            "class": "sl.log"
        },
        {
            "file": "..\\dev\\log\\log_mode.js",
            "line": 9,
            "description": "调试信息级别代号",
            "itemtype": "property",
            "name": "DEBUG",
            "type": "{Number}",
            "default": "0",
            "class": "sl.log_mode"
        },
        {
            "file": "..\\dev\\log\\log_mode.js",
            "line": 17,
            "description": "日志信息级别代号",
            "itemtype": "property",
            "name": "INFO",
            "type": "{Number}",
            "default": "1",
            "class": "sl.log_mode"
        },
        {
            "file": "..\\dev\\log\\log_mode.js",
            "line": 25,
            "description": "警告信息级别代号",
            "itemtype": "property",
            "name": "WARN",
            "type": "{Number}",
            "default": "2",
            "class": "sl.log_mode"
        },
        {
            "file": "..\\dev\\log\\log_mode.js",
            "line": 33,
            "description": "错误信息级别代号",
            "itemtype": "property",
            "name": "ERROR",
            "type": "{Number}",
            "default": "3",
            "class": "sl.log_mode"
        },
        {
            "file": "..\\dev\\native_extend\\array\\array.js",
            "line": 8,
            "description": "需要处理的数组",
            "itemtype": "property",
            "name": "array",
            "type": "{Array}",
            "default": "[]",
            "class": "sl.array"
        },
        {
            "file": "..\\dev\\native_extend\\array\\array.js",
            "line": 18,
            "description": "当数组没有顺序要求时候，该方法能快速删除某一指定下标的数组项",
            "params": [
                {
                    "name": "index",
                    "description": "指定的数组下标",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "qRemoveByIndex",
            "example": [
                " sl.array(arr).qRemoveByIndex(1);"
            ],
            "return": {
                "description": "删除某项后的数组",
                "type": "Array"
            },
            "class": "sl.array"
        },
        {
            "file": "..\\dev\\native_extend\\array\\array.js",
            "line": 38,
            "description": "当数组有顺序要求时候，该方法能删除某一指定数组项而不改变数组顺序",
            "params": [
                {
                    "name": "index",
                    "description": "指定的数组下标",
                    "type": "Number"
                }
            ],
            "itemtype": "method",
            "name": "cRemoveByIndex",
            "example": [
                " sl.array(arr).cRemoveByIndex(1);"
            ],
            "return": {
                "description": "删除某项后的数组",
                "type": "Array"
            },
            "class": "sl.array"
        },
        {
            "file": "..\\dev\\native_extend\\array\\array.js",
            "line": 57,
            "description": "随即抽取一数组项",
            "itemtype": "method",
            "name": "random",
            "example": [
                " sl.array(arr).random();"
            ],
            "return": {
                "description": "随即出来的数组项"
            },
            "class": "sl.array"
        },
        {
            "file": "..\\dev\\native_extend\\array\\array.js",
            "line": 68,
            "description": "比较 2 个数组是否相等",
            "params": [
                {
                    "name": "arr",
                    "description": "需要比较的数组",
                    "type": "Array"
                }
            ],
            "itemtype": "method",
            "name": "equalsTo",
            "example": [
                " sl.array(arr1).equalsTo(arr2);"
            ],
            "return": {
                "description": "ture 表述2数组相等，false 则不相等",
                "type": "Bool"
            },
            "class": "sl.array"
        },
        {
            "file": "..\\dev\\native_extend\\array\\array.js",
            "line": 98,
            "description": "判断数组是否包含某一指定值",
            "params": [
                {
                    "name": "data",
                    "description": "需要判断的键值"
                }
            ],
            "itemtype": "method",
            "name": "isContain",
            "example": [
                " sl.array(arr).isContain(1);"
            ],
            "return": {
                "description": "ture 表述数组包含该特定值，false 则不包含",
                "type": "Bool"
            },
            "class": "sl.array"
        },
        {
            "file": "..\\dev\\native_extend\\array\\array.js",
            "line": 127,
            "description": "转换成字符串",
            "itemtype": "method",
            "name": "toString",
            "example": [
                " sl.array(arr).toString();"
            ],
            "return": {
                "description": "转换后的字符串",
                "type": "String"
            },
            "class": "sl.array"
        },
        {
            "file": "..\\dev\\native_extend\\array\\array.js",
            "line": 150,
            "description": "复制数组",
            "itemtype": "method",
            "name": "copy",
            "example": [
                " sl.array(arr).copy();"
            ],
            "return": {
                "description": "复制后的数组",
                "type": "Array"
            },
            "class": "sl.array"
        },
        {
            "file": "..\\dev\\native_extend\\object\\object.js",
            "line": 8,
            "description": "需要处理的对象",
            "itemtype": "property",
            "name": "object",
            "type": "{object}",
            "default": "{}",
            "class": "sl.object"
        },
        {
            "file": "..\\dev\\native_extend\\object\\object.js",
            "line": 18,
            "description": "比较 2 个对象是否相等",
            "params": [
                {
                    "name": "obj",
                    "description": "需要比较的对象",
                    "type": "Object"
                }
            ],
            "itemtype": "method",
            "name": "equalsTo",
            "example": [
                " sl.object(obj1).equalsTo(obj2);"
            ],
            "return": {
                "description": "ture 表述2对象相等，false 则不相等",
                "type": "Bool"
            },
            "class": "sl.object"
        },
        {
            "file": "..\\dev\\native_extend\\object\\object.js",
            "line": 46,
            "description": "判断对象是否包含某一指定值",
            "params": [
                {
                    "name": "data",
                    "description": "需要判断的键值",
                    "type": "String"
                }
            ],
            "itemtype": "method",
            "name": "isContain",
            "example": [
                " sl.object(object).isContain(1);"
            ],
            "return": {
                "description": "ture 表述对象包含该特定值，false 则不包含",
                "type": "Bool"
            },
            "class": "sl.object"
        },
        {
            "file": "..\\dev\\native_extend\\object\\object.js",
            "line": 63,
            "description": "转换成字符串",
            "itemtype": "method",
            "name": "toString",
            "example": [
                " sl.object(object).toString();"
            ],
            "return": {
                "description": "转换后的字符串",
                "type": "String"
            },
            "class": "sl.object"
        },
        {
            "file": "..\\dev\\native_extend\\object\\object.js",
            "line": 86,
            "description": "复制对象",
            "itemtype": "method",
            "name": "clone",
            "example": [
                " sl.object(object).clone();"
            ],
            "return": {
                "description": "复制后的对象",
                "type": "Object"
            },
            "class": "sl.object"
        },
        {
            "file": "..\\dev\\native_extend\\string\\string.js",
            "line": 15,
            "description": "需要处理的字符串",
            "itemtype": "property",
            "name": "string",
            "type": "{String}",
            "default": "\"\"",
            "class": "sl.string"
        },
        {
            "file": "..\\dev\\native_extend\\string\\string.js",
            "line": 25,
            "description": "首字母变大写",
            "itemtype": "method",
            "name": "initialsToUpper",
            "example": [
                " sl.string(str).initialsToUpper();"
            ],
            "return": {
                "description": "首字母变大写后的字符串",
                "type": "String"
            },
            "class": "sl.string"
        },
        {
            "file": "..\\dev\\native_extend\\string\\string.js",
            "line": 35,
            "description": "判断字符串中是否包含某指定字符",
            "itemtype": "method",
            "name": "isContain",
            "params": [
                {
                    "name": "item",
                    "description": "指定字符，单个字符。",
                    "type": "String"
                }
            ],
            "example": [
                " sl.string(str).initialsToUpper();"
            ],
            "return": {
                "description": "是否包含该字符，true 为包含。",
                "type": "Bool"
            },
            "class": "sl.string"
        },
        {
            "file": "..\\dev\\native_extend\\string\\string.js",
            "line": 50,
            "description": "判断字符串格式是否为 email",
            "itemtype": "method",
            "name": "isEmail",
            "example": [
                " sl.string(str).isEmail();"
            ],
            "return": {
                "description": "字符串格式是否为 email，true 为 email 格式。",
                "type": "Bool"
            },
            "class": "sl.string"
        },
        {
            "file": "..\\dev\\native_extend\\string\\string.js",
            "line": 60,
            "description": "判断字符串格式是否为 post",
            "itemtype": "method",
            "name": "isPost",
            "example": [
                " sl.string(str).isPost();"
            ],
            "return": {
                "description": "字符串格式是否为 post，true 为 post 格式。",
                "type": "Bool"
            },
            "class": "sl.string"
        },
        {
            "file": "..\\dev\\native_extend\\extendBase.js",
            "line": 8,
            "description": "配置对象",
            "itemtype": "property",
            "name": "Config",
            "type": "{object}",
            "class": "extendBase"
        },
        {
            "file": "..\\dev\\native_extend\\extendBase.js",
            "line": 19,
            "description": "获取参数类型",
            "params": [
                {
                    "name": "需要判断类型的参数",
                    "description": "",
                    "type": "任意"
                }
            ],
            "itemtype": "method",
            "name": "getType",
            "return": {
                "description": "参数类型",
                "type": "String"
            },
            "example": [
                " sl.base.getType(\"mseeage\") 或 sl.base.getType([1, 2, 3]);"
            ],
            "class": "extendBase"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: parmas",
            "line": " ..\\dev\\eagleMysql\\eagleMysql.js:20"
        },
        {
            "message": "unknown tag: parmas",
            "line": " ..\\dev\\eagleMysql\\eagleMysql.js:34"
        },
        {
            "message": "unknown tag: parmas",
            "line": " ..\\dev\\eagleMysql\\eagleMysql.js:56"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ..\\dev\\eagleMysql\\eagleMysql.js:56"
        },
        {
            "message": "unknown tag: parmas",
            "line": " ..\\dev\\eagleMysql\\eagleMysql.js:94"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ..\\dev\\eagleMysql\\eagleMysql.js:94"
        },
        {
            "message": "unknown tag: parmas",
            "line": " ..\\dev\\eagleMysql\\eagleMysql.js:127"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ..\\dev\\eagleMysql\\eagleMysql.js:127"
        },
        {
            "message": "unknown tag: parmas",
            "line": " ..\\dev\\eagleMysql\\eagleMysql.js:166"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ..\\dev\\eagleMysql\\eagleMysql.js:166"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " ..\\dev\\native_extend\\string\\string.js:35"
        }
    ]
}